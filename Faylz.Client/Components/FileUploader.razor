@using Microsoft.AspNetCore.Components.Forms
@using Faylz.Client.Models
@inject Faylz.Client.Services.FileService FileService

<div class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center cursor-pointer hover:bg-blue-50 transition-colors duration-150 @(isDragging ? "bg-blue-50 border-blue-300" : "")" 
    @ondragenter="HandleDragEnter" 
    @ondragleave="HandleDragLeave"
    @ondragover:preventDefault
    @ondrop:preventDefault
    @ondrop="HandleDrop">
    
    <div class="space-y-2">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
        </svg>
        <div class="font-medium text-gray-900">Drag & drop @AcceptLabel files here</div>
        <div class="text-gray-500 text-sm">or click to select files</div>
    </div>
    
    <InputFile OnChange="HandleFileSelected" accept="@Accept" multiple="@Multiple" class="w-full h-full opacity-0 cursor-pointer" />
</div>

@code {
    private bool isDragging = false;
    
    [Parameter]
    public string Accept { get; set; } = "*/*";
    
    [Parameter]
    public string AcceptLabel { get; set; } = "";
    
    [Parameter]
    public bool Multiple { get; set; } = true;
    
    [Parameter]
    public long MaxFileSize { get; set; } = 1024 * 1024 * 15; // 15MB default
    
    [Parameter]
    public EventCallback<List<UploadedFile>> OnFilesProcessed { get; set; }
    
    [Parameter]
    public EventCallback<InputFileChangeEventArgs> OnFilesSelected { get; set; }

    private void HandleDragEnter()
    {
        isDragging = true;
    }

    private void HandleDragLeave()
    {
        isDragging = false;
    }

    private void HandleDrop()
    {
        isDragging = false;
    }
    
    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        // First, pass through the original event for backward compatibility
        if (OnFilesSelected.HasDelegate)
        {
            await OnFilesSelected.InvokeAsync(e);
        }
        
        // If the OnFilesProcessed callback is registered, process files
        if (OnFilesProcessed.HasDelegate)
        {
            try
            {
                var files = await FileService.ReadMultipleFilesAsync(e.GetMultipleFiles(), MaxFileSize);
                await OnFilesProcessed.InvokeAsync(files);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error processing files: {ex.Message}");
            }
        }
    }
} 