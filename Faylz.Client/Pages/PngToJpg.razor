@page "/png-jpg"

@using System.IO;
@using System.IO.Compression;
@using Microsoft.AspNetCore.Components.Forms;
@using SkiaSharp
@using Microsoft.JSInterop;
@using Faylz.Client.Models;
@using Faylz.Client.Services;
@inject IJSRuntime JS
@inject FileService FileService

<PageTitle>Convert PNG to JPG Images | Faylz</PageTitle>

<div class="bg-gradient-to-b from-blue-50 to-white pt-12 pb-6">
    <div class="container mx-auto px-4">
        <div class="max-w-4xl mx-auto">
            <div class="mb-8 text-center">
                <h1 class="text-3xl font-bold mb-4">Convert PNG to JPG</h1>
                <p class="text-gray-600 max-w-2xl mx-auto">Convert PNG images to JPG format with customizable quality settings. Ideal for compatibility and reducing file size.</p>
            </div>
        </div>
    </div>
</div>

<div class="container mx-auto px-4 py-8">
    <div class="max-w-4xl mx-auto">
        <div class="mb-8">
            <div class="bg-white rounded-xl shadow-md p-8 border border-gray-100">
                <div class="space-y-6">
                    <div>
                        <h2 class="text-xl font-semibold mb-3">Quality Settings</h2>
                        <div class="flex flex-col gap-3">
                            <div>
                                <label for="quality" class="block text-sm font-medium text-gray-700 mb-1">JPG Quality: @Quality%</label>
                                <input type="range" min="5" max="95" @bind="Quality" @bind:event="oninput" class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer accent-blue-600" />
                                <div class="flex justify-between text-xs text-gray-500 mt-1">
                                    <span>Lower Quality</span>
                                    <span>Higher Quality</span>
                                </div>
                            </div>

                            <div class="mt-3 grid grid-cols-1 md:grid-cols-3 gap-3">
                                <button @onclick="() => Quality = 30" class="bg-blue-50 hover:bg-blue-100 text-blue-700 px-4 py-2 rounded-lg text-sm transition">Low Quality</button>
                                <button @onclick="() => Quality = 60" class="bg-blue-50 hover:bg-blue-100 text-blue-700 px-4 py-2 rounded-lg text-sm transition">Medium Quality</button>
                                <button @onclick="() => Quality = 90" class="bg-blue-50 hover:bg-blue-100 text-blue-700 px-4 py-2 rounded-lg text-sm transition">High Quality</button>
                            </div>
                        </div>
                    </div>

                    <div class="mt-3">
                        <div class="flex items-center mb-3">
                            <input id="background-color" type="checkbox" @bind="UseWhiteBackground" class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500" />
                            <label for="background-color" class="ml-2 block text-sm font-medium text-gray-700">Use white background (for transparent PNGs)</label>
                        </div>
                        <p class="text-xs text-gray-500">JPG format doesn't support transparency. Enabling this option will fill transparent areas with white; otherwise, they'll be filled with black.</p>
                    </div>

                    <div class="border-t border-gray-100 pt-6">
                        <h2 class="text-xl font-semibold mb-3">Upload Images</h2>
                        @if (isLoading)
                        {
                            <div class="flex items-center justify-center p-8">
                                <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mr-2"></div>
                                <span>Loading files...</span>
                            </div>
                        }
                        else
                        {
                            <FileUploader 
                                Accept="image/png" 
                                AcceptLabel="PNG" 
                                MaxFileSize="@MaxFileSize" 
                                OnFilesProcessed="OnFilesProcessed" />
                        }
                    </div>
                </div>
            </div>
        </div>

        @if (UploadedFiles.Count > 0)
        {
            <div class="bg-white rounded-xl shadow-md p-8 border border-gray-100 mb-8">
                <div class="flex items-center justify-between mb-4">
                    <h2 class="text-xl font-semibold">Your Images</h2>
                    <span class="bg-blue-100 text-blue-800 text-xs font-medium px-2.5 py-0.5 rounded-full">@UploadedFiles.Count files</span>
                </div>

                <div class="mb-4">
                    <div class="flex justify-between text-sm text-gray-600 mb-1">
                        <span>Conversion Progress:</span>
                        <span>@ConversionProgress%</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2.5">
                        <div class="bg-blue-600 h-2.5 rounded-full" style="width: @ConversionProgress%"></div>
                    </div>
                </div>

                <div class="space-y-4">
                    @foreach (var file in UploadedFiles)
                    {
                        <div class="border border-gray-200 rounded-lg overflow-hidden">
                            <div class="flex items-center justify-between p-4">
                                <div class="flex items-center space-x-3">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                    </svg>
                                    <div>
                                        <div class="text-sm font-medium text-gray-900">@file.FileName</div>
                                        @if (file.OriginalSize > 0 && file.ProcessedSize > 0)
                                        {
                                            <div class="text-xs text-gray-500">
                                                Original (PNG): @FormatFileSize(file.OriginalSize) â€¢ 
                                                JPG: @FormatFileSize(file.ProcessedSize)
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="text-xs text-gray-500">
                                                Original (PNG): @FormatFileSize(file.OriginalSize)
                                            </div>
                                        }
                                    </div>
                                </div>

                                @if (file.IsProcessed)
                                {
                                    <button @onclick="() => DownloadConvertedFile(file)" class="bg-blue-600 hover:bg-blue-700 text-white text-sm px-3 py-1.5 rounded-lg transition">
                                        Download JPG
                                    </button>
                                }
                                else if (isConverting)
                                {
                                    <div class="flex items-center space-x-2 text-blue-600">
                                        <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                                        <span class="text-sm">Converting...</span>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>

                <div class="flex gap-3 mt-6">
                    <button @onclick="ConvertImages" disabled="@isConverting" class="flex-1 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-300 text-white font-medium py-2 px-4 rounded-lg transition flex justify-center items-center">
                        @if (isConverting)
                        {
                            <div class="mr-2 animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                            <span>Converting...</span>
                        }
                        else
                        {
                            <span>Convert All to JPG</span>
                        }
                    </button>

                    @if (UploadedFiles.Any(f => f.IsProcessed))
                    {
                        <button @onclick="DownloadAllAsZip" class="bg-green-600 hover:bg-green-700 text-white font-medium py-2 px-4 rounded-lg transition flex-1">
                            Download All (.zip)
                        </button>
                    }

                    <button @onclick="ClearAllFiles" class="bg-gray-100 hover:bg-gray-200 text-gray-800 font-medium py-2 px-4 rounded-lg transition">
                        Clear All
                    </button>
                </div>
            </div>
        }

        <div class="bg-white rounded-xl shadow-md p-8 border border-gray-100">
            <h2 class="text-xl font-semibold mb-4">About PNG to JPG Conversion</h2>
            <div class="prose prose-blue max-w-none">
                <p>Converting PNG to JPG can significantly reduce file size, but there are some important differences to know:</p>
                <ul>
                    <li><strong>Transparency:</strong> JPG doesn't support transparency. Transparent areas in your PNG will be filled with white (or black if "Use white background" is disabled).</li>
                    <li><strong>Compression:</strong> JPG uses lossy compression, which may reduce image quality but creates smaller files.</li>
                    <li><strong>Use cases:</strong> JPG is ideal for photographs and complex images with many colors where file size is important.</li>
                </ul>
                <p>All processing happens directly in your browser. Your images never leave your device, ensuring complete privacy.</p>
            </div>
        </div>
    </div>
</div>

@code {
    private List<UploadedFile> UploadedFiles = new();
    private int ConversionProgress = 0;
    private readonly long MaxFileSize = 1024 * 1024 * 15; // 15MB
    private int Quality = 80; // Default quality setting
    private bool UseWhiteBackground = true; // Default to white background for transparency
    private bool isConverting = false;
    private bool isLoading = false;

    private void ClearAllFiles()
    {
        UploadedFiles.Clear();
        ConversionProgress = 0;
    }

    private async Task ConvertImages()
    {
        if (UploadedFiles.Count == 0 || isConverting) return;

        try
        {
            isConverting = true;
            ConversionProgress = 0;
            StateHasChanged();

            var filesToConvert = UploadedFiles.Where(f => !f.IsProcessed).ToList();
            for (int i = 0; i < filesToConvert.Count; i++)
            {
                await ConvertFile(filesToConvert[i]);
                ConversionProgress = (int)Math.Round((double)(i + 1) / filesToConvert.Count * 100);
                StateHasChanged();
            }
        }
        finally
        {
            isConverting = false;
            StateHasChanged();
        }
    }

    private async Task ConvertFile(UploadedFile file)
    {
        try {
            if (file.FileData == null)
            {
                Console.WriteLine("Error: FileData is null");
                return;
            }
            
            var convertedBytes = await ConvertPngToJpg(file.FileData);
            file.IsProcessed = true;
            file.ProcessedData = convertedBytes;
            file.ProcessedSize = convertedBytes.Length;
        }
        catch (Exception ex) {
            Console.WriteLine($"Error converting file: {ex.Message}");
        }
    }

    private async Task<byte[]> ConvertPngToJpg(byte[] fileData)
    {
        try
        {
            // Load the PNG image with SkiaSharp
            using var inputData = SKData.CreateCopy(fileData);
            using var original = SKBitmap.Decode(inputData);
            
            // Create a new bitmap with the same dimensions but without alpha channel
            using var surface = SKSurface.Create(new SKImageInfo(original.Width, original.Height, SKColorType.Rgba8888));
            using var canvas = surface.Canvas;
            
            // Fill with white or black background if the image has transparency
            if (UseWhiteBackground)
            {
                canvas.Clear(SKColors.White);
            } 
            else 
            {
                canvas.Clear(SKColors.Black);
            }
            
            // Draw the original image on top
            canvas.DrawBitmap(original, 0, 0);
            
            // Get the image from the surface and encode to JPG
            using var image = surface.Snapshot();
            using var outputData = image.Encode(SKEncodedImageFormat.Jpeg, Quality);
            
            // Convert to byte array
            using var memoryStream = new MemoryStream();
            outputData.SaveTo(memoryStream);
            return memoryStream.ToArray();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in ConvertPngToJpg: {ex.Message}");
            throw;
        }
    }

    private async Task DownloadConvertedFile(UploadedFile file)
    {
        if (file.IsProcessed && file.ProcessedData != null)
        {
            string fileName = $"{Path.GetFileNameWithoutExtension(file.FileName)}.jpg";
            await FileService.DownloadFile(file.ProcessedData, "image/jpeg", fileName);
        }
    }

    private async Task DownloadAllAsZip()
    {
        var files = UploadedFiles
            .Where(f => f.IsProcessed && f.ProcessedData != null)
            .ToDictionary(
                f => $"{Path.GetFileNameWithoutExtension(f.FileName)}.jpg",
                f => f.ProcessedData
            );

        if (files.Count > 0)
        {
            var zipData = await FileService.CreateZipArchiveAsync(files);
            await FileService.DownloadFile(zipData, "application/zip", "converted_images.zip");
        }
    }

    private async Task OnFilesProcessed(List<UploadedFile> files)
    {
        try
        {
            isLoading = true;
            StateHasChanged();
            
            foreach (var file in files)
            {
                if (file.ContentType.ToLower() == "image/png")
                {
                    UploadedFiles.Add(file);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error processing files: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
} 